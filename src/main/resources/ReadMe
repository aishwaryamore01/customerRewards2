ðŸ“Œ Reward Points Calculation Logic
For every $1 spent over $100 â†’ 2 points
For every $1 spent between $50â€“100 â†’ 1 point
For transactions below $50 â†’ 0 points

Examples:
Transaction of $120 â†’ (50 Ã— 1) + (20 Ã— 2) = 90 points
Transaction of $75 â†’ (25 Ã— 1) = 25 points


src/main/java/com/infy/customerRewards/

â”œâ”€â”€ controller/
â”‚   â””â”€â”€ RewardController.java          # REST API endpoints
â”œâ”€â”€ service/
â”‚   â””â”€â”€ RewardService.java             # Service interface
â”œâ”€â”€ serviceImpl/
â”‚   â””â”€â”€ RewardServiceImpl.java         # Service implementation
â”œâ”€â”€ entity/
â”‚   â”œâ”€â”€ Customer.java                  # Customer entity
â”‚   â””â”€â”€ Transaction.java               # Transaction entity
â”œâ”€â”€ repository/
â”‚   â”œâ”€â”€ CustomerRepository.java        # Customer data access
â”‚   â””â”€â”€ TransactionRepository.java     # Transaction data access
â”œâ”€â”€ dto/
â”‚   â”œâ”€â”€ CustomerDTO.java               # Customer data transfer object
â”‚   â”œâ”€â”€ CustomerResponseDTO.java       # Customer response DTO
â”‚   â”œâ”€â”€ TransactionDTO.java            # Transaction DTO
â”‚   â”œâ”€â”€ RewardResponseDTO.java         # Reward response DTO
â”‚   â””â”€â”€ MonthlyRewardDTO.java          # Monthly reward breakdown DTO
â””â”€â”€ utility/
    â””â”€â”€ RewardCalculator.java          # Reward calculation logic
    
    
Java 8+
Spring Boot - Application framework
Spring Data JPA - Data persistence
Spring Security - Security and password encoding
ModelMapper - Object mapping
Lombok - Code generation (optional)
Maven - Dependency management

API Endpoints

1.Create Customer

POST /api/rewards/customers
Content-Type: application/json

{
  "custName": "John Doe",
  "phoneNo": "1234567890",
  "transactions": [
    {
      "date": "2024-01-15",
      "product": "Laptop",
      "amount": 150.0
    }
  ]
}

2.Get Customer Transactions

GET /api/rewards/customers/{customerId}/transactions

3. Get Customer Rewards

GET /api/rewards/customers/{customerId}/rewards?startDate=2024-01-01&endDate=2024-12-31

Reward Response Example

{
  "customerId": 1,
  "custName": "John Doe",
  "phoneNo": "encoded_phone_number",
  "transactions": [
    {
      "id": 1,
      "date": "2024-01-15",
      "product": "Laptop",
      "amount": 150.0,
      "rewardPoints": 150
    }
  ],
  "monthlyRewards": [
    {
      "year": 2024,
      "month": "January",
      "points": 150
    }
  ],
  "totalRewards": 150,
  "timeFrame": {
    "startDate": "2024-01-01",
    "endDate": "2024-12-31"
  }
}

Application Properties
properties
# Database configuration
spring.datasource.url=jdbc:mysql://localhost:3306/rewards_db
spring.datasource.username=root
spring.datasource.password=root

# JPA configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Custom messages
customer.notfound=Customer not found
transaction.notfound=No transactions found in the system